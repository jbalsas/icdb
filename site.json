{"title":"ICDB","githubRepo":"jbalsas/icdb","googleAnalytics":"UA-37033501-5","index":{"title":"Conferences, talks and tech","description":"The Internet Conference Database is a place to comment and share tech talks and conferences around the world","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","url":"/.","children":{"confs":{"title":"Conferences","description":"Start exploring your favourite talks and conferences.","content":" Conferences Explore, comment and share your favourite tech talks and conferences. Choose a Conference Each one provides additional information of every talk of the event. ","srcFilePath":"src/pages/confs/index.soy","id":"confs","url":"/confs","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Search Talks Explore, comment and share your favourite tech talks and conferences. ","srcFilePath":"src/pages/confs/search.soy","id":"search","url":"/confs/search.html"},"2017_cssconf_eu":{"children":{"a_unified_styling_language":{"title":"A Unified Styling Language","description":"In the past few years, we’ve witnessed a massive increase in the amount of CSS experimentation, with ideas like CSS Modules and—most controversially—the rise of CSS-in-JS. But does mixing our styles and logic run counter to the original ideas of CSS? Does it break progressive enhancement? In this talk, we’ll take an empathetic look at these new approaches, how they relate to the history of CSS, and why they might possibly hold the key to the future of CSS—all from the point-of-view of someone who has been writing CSS since 1999.","speaker":"Mark Dalgleish","twitter":"markdalgleish","video":null,"tags":["css","css-in-js"],"layout":"talk","weight":2,"content":" Notes Scoped Styles The hardest problem in front-end Different conventions: oocs, smacs, bem Why just convention? Nice to have clases generated for you You can still separate your styles into a different file! CSS Modules Critical CSS: Inlining styles for the current page to speed up initial render Smarter Optimisations: Treat classes like code Package Management: Manual CSS inclusion not coupled to a module system Non-Browser Styling: Different renderers Opinion Nice take on generated classes Lots of good resources Nice hints as to where design systems are going Related Links Related Links | Rating --- | --- oocss | ★★★☆☆ smacs | ★★★☆☆ BEM | ★★★☆☆ Glamor | ★★★☆☆ JSS | ★★★☆☆ Critical | ★★★☆☆ Aphrodite | ★★★☆☆ Atomic | ★★★☆☆ Tachyons | ★★★☆☆ Styletron | ★★★☆☆ Polished | ★★★☆☆ Yoga | ★★★☆☆ react-native-web | ★★★☆☆ react-primitives | ★★★☆☆ ReactXP | ★★★☆☆ React Sketch.app | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/a_unified_styling_language.md","id":"a_unified_styling_language","url":"/confs/2017_cssconf_eu/a_unified_styling_language.html"},"css_and_the_first_meaningful_paint":{"title":"CSS and the first meaningful paint","description":"To render a webpage browsers needs to go through the complex dance of networking, parsing and painting before any content can be displayed to your user. Over the years, we've developed mechanisms and hacks to aid the browser at each stage of this process, but these have always come at some cost or trade-off.\nHow can we utilize modern web platform features to load our CSS as fast as possible? Should we still be inlining our critical content into the document or instead, how can HTTP/2 server push and Service Workers help us?\nIn this talk we will take a journey exploring the current, past, and future best-practices for loading CSS in the browser and how we can achieve a first meaningful paint within 1000ms. Ultimately creating a faster, more resilient experience for our users.","speaker":"Patrick Hamann","twitter":"patrickhamann","video":null,"tags":["css","performance"],"layout":"talk","weight":2,"content":" Notes How do you measure performance? New metrics are user-oriented, focused on users needs and not our delivery. First Meaningful Paint Not exposed as an API yet, but talking about it. Read whitepaper! You can use Lighthouse to audit ttfmp Use Webpagetest to test on real devices in real conditions There's no single profile for the same user (conditions change) Technique | Pros | Cons --- | --- | --- Inline critical CSS | no blocking, no spof, no critical request, instant painting | reflow, cache, maintenance and automation Preload (what are your critical resources | indicate hidden resources, dictate priority, separate fetch from exec | easy to create contention, requires server logic Server Push (HTTP/2) | we eliminate a request | We get a penalty, not an improvement Async Push | | What about repeat view We have no way to indicate how things are cached - PRPL pattern! Future Early hints 103 response CACHE_DIGEST Opinion Interesting talk with emphasis in the importance of using the proper tools Related Links Related Links | Rating --- | --- Lighthouse | ★★★☆☆ WebPageTest | ★★★☆☆ Time to First Meaningful Paint Proposal | ★★★☆☆ Preload Specification Working Draft | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/css_and_the_first_meaningful_paint.md","id":"css_and_the_first_meaningful_paint","url":"/confs/2017_cssconf_eu/css_and_the_first_meaningful_paint.html"},"css_and_the_hierarchy_problem":{"title":"CSS and the hierarchy problem: What makes a CSS developer?","description":"This talk is about hierarchies: as CSS hurtles toward being object- and systems-oriented, the titles and responsibilities of designer and developer become much more fluid and yet, we continue to categorise. We draw lines between front and back end, between CSS and Javascript (“CSS isn’t _real_ development”), and even between CSS disciplines, but why? Furthermore, we implicitly draw these lines between white male developers and everyone else. This results in damaging hierarchies that threaten to devalue the work we do in diversifying CSS — both as a language and as a community.","speaker":"Ivana McConnell","twitter":"ivanamcconnell","video":"afAc75d02U0","tags":["css","community"],"layout":"talk","weight":2,"content":" Notes What do you do? Originally CSS = Design, but the web is growing so it becomes much more than that CSS isn't really development But CSS is more than that. It touches everything. Presentation affects interaction and experience The repetition, makes it become an assumption, so the implications that one is harder and better than the other. We make wrong decissions because of that. Undervaluing CSS has consequences For salary For teams For personal health For our products Opinion A somehow bitter and reivindicative talk about the perception of CSS developement and its implications. Related Links Related Links | Rating --- | --- Seed.css | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/css_and_the_hierarchy_problem.md","id":"css_and_the_hierarchy_problem","url":"/confs/2017_cssconf_eu/css_and_the_hierarchy_problem.html"},"css_art_history_101":{"title":"CSS Art History 101: Decoding Layout Through The Ages","description":"For centuries the visual arts have been used to tell stories, warn people about dangers and invoke emotion. Today we use the internet for all those purposes and more. Just as the Vatican employed painters to spread their message – it will be the developers and designers who will lead us into the next Renaissance. But there is still a lot to learn from the great masters. In this talk, we will flexbox the Golden Ratio with Leonardo DaVinci, up the pixel ratio for our devices with the Impressionists & ”inspect elements” of some iconic works of art to make the web a more beautiful place.","speaker":"Patricia Realini","twitter":"patriciarealini","video":null,"tags":["css","inspiration"],"layout":"talk","weight":2,"content":" Notes Opinion Very abstract talk about art and css, just that no css at all was shown Related Links ","srcFilePath":"src/pages/confs/2017_cssconf_eu/css_art_history_101.md","id":"css_art_history_101","url":"/confs/2017_cssconf_eu/css_art_history_101.html"},"data_sketches_a_visualization_a_month":{"title":"Data sketch|es: A Visualization a Month","description":"Data sketches is a collaboration between Nadieh and Shirley, where they choose a topic and visualize it by the end of the month. The collaboration started for many reasons: they weren’t creating as many personal data visualization projects, so they were looking for the motivation to make more. They wanted to explore their creativity, to experiment with the tools that are out there, to learn from each other, and to have fun.\nIn this talk, Shirley and Nadieh will share the lessons they learned while working on data sketches. They will highlight their favorite months of data, sketches, and code: what made them their favorites, the mistakes made along the way, and how they overcame them. They hope that by sharing their visualizations’ humble, ugly duckling beginnings and their many (embarrassing) iterations, that it will inspire others to create their own unique and compelling visualizations.","speaker":"Nadieh Bremer & Shirley Wu","twitter":"sxywu","video":null,"tags":["css","data-visualization"],"layout":"talk","weight":2,"content":" Notes 1 topic per month to visualize Data Idea first, always Be curious, get creative with the data gathering (but play responsibly) Get a feeling of accuracy and completeness of your data Sketch Design with code (the actual data has a great impact) Go back and forth with the sketch and code to figure out what works and what doesnt Code Remix whats out there already. No need to start from scratch always Really understand the tools you use to go beyond what's already there Expect struggles (learn to love math) The other stuff matters too. Pay attention to the little details. animations, notes... Opinion Nice talk about a beautiful data-viz project Related Links Related Links | Rating --- | --- datasketch.es | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/data_sketches_a_visualization_a_month.md","id":"data_sketches_a_visualization_a_month","url":"/confs/2017_cssconf_eu/data_sketches_a_visualization_a_month.html"},"get_ready_for_the_future_of_css":{"title":"Get Ready for the Future of CSS!","description":"It’s time to start thinking about new and upcoming CSS features that will boost your workflow and give you more power and flexibility when building your projects. This talk covers the latest CSS features, including: color manipulation, custom properties, selectors level 4, and what's new in media queries. We’ll also have a look at in-browser design features like blend modes and clip-path.","speaker":"Guil Hernandez","twitter":"guilh","video":null,"tags":["css","specs"],"layout":"talk","weight":2,"content":" Notes CSS Variables (custom properties) References to values you can reuse --property-name : value; and follow the rules of the cascade and can be scoped Preprocessor variables: Static Do not run in the browser Not aware of the DOM structure You can create nice theming structures based on when the element appears without complex nested selectors, just changing the variable value. You can only use them in values. Compositing & Blending background-blend-mode mix-blend-mode backdrop-filter Shapes Use geometric shapes as css values to layout text around shape-outside + polygon() clip-path Colors Color Module Level 4 8 digit hex colors color-mod() - apply color adjustments Selector Selectors Level 4 Working Draft :matches :required | :optional :valid | :invalid @supports (feature queries) Opinion Interesting theming take on css variables without having to be dom-aware. Very nice summary of upcoming css features Related Links Related Links | Rating --- | --- CSS Shapes Editor | ★★★☆☆ Clippy | ★★★☆☆ Selectors Level 4 | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/get_ready_for_the_future_of_css.md","id":"get_ready_for_the_future_of_css","url":"/confs/2017_cssconf_eu/get_ready_for_the_future_of_css.html"},"getting_reactive_with_css":{"title":"Getting Reactive with CSS","description":"As user interfaces evolve and become more interactive, design requirements become more complex. By combining CSS variables with reactive programming in JS, we can now express animations, styles, layout, and more in ways never before possible with CSS. In this talk, we’ll explore what functional reactive programming is, why it is incredibly useful, and how we can leverage the power of CSS variables to push the limits of styling the web.","speaker":"David Khourshid","twitter":"davidkpiano","video":null,"tags":[],"layout":"talk","weight":2,"content":" Notes CSS is not powerful but that's a good thing You should use the language with least power to accomplish what you want Because lines between webapps and native apps are blurring, microinteractions are crucial to reduce cognitive load. Making web interactions easier to make with CSS CSS Variables Performance setting a css variable on a parent element is twice as fast as inline styles Support in all major browsers Functional & Reactive Observables Spec (rxjs) Marble diagrams Opinion Interesting stress on moving styling back to CSS and just sending variables over from JS or any other language. Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_cssconf_eu/getting_reactive_with_css.md","id":"getting_reactive_with_css","url":"/confs/2017_cssconf_eu/getting_reactive_with_css.html"},"lets_build_a_css_game":{"title":"Let’s Build a CSS Game","description":"Let’s live code a game together using just CSS and HTML! This talk will demonstrate the power of CSS and will teach a few fun tips as tricks as we build a simple game. It’ll be based in Sass — using data structures like matrices and HTML counter-incrementing, and a little bit of web magic to tie it all together. This talk will inspire you to play with and create your own CSS games, pushing the boundaries of what’s expected from the language itself.","speaker":"Una Kravets","twitter":"una","video":null,"tags":["css","live"],"layout":"talk","weight":2,"content":" Notes Opinion Fun live coding session, specially interesting the css pixelart technique Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_cssconf_eu/lets_build_a_css_game.md","id":"lets_build_a_css_game","url":"/confs/2017_cssconf_eu/lets_build_a_css_game.html"},"scaffolding_css_for_scale":{"title":"Scaffolding CSS for Scale?","description":"Ever thought about localising your site, but realised it led to a lot of messy duplication? Do you want to re-use component styles, but have some styles overwrite others due to that cascade? Not sure where to start with CSS architecture?\nIn this talk, you'll learn how to get started with your own lightweight, localised CSS setup. We'll go through how we use Grandstand, a CSS framework built by BBC Sport, as the scaffolding for our CSS. Starting with bare bones of just ~10kb, it has the flexibility to allow layouts in 10 scripts for 20+ languages, and we’re using it across the BBC News & Sport sites.","speaker":"Sareh Heidari","twitter":"sareh88","videoid":null,"tags":["css","frameworks"],"layout":"talk","weight":2,"content":" Notes BBC News Lots of users Lots of pages Easyc to reuse Localisable Lightweight Grandstand Dont want components with repeated CSS Namespace all the things (BEML) Components Objects (gs-o-*) - 11 different ones (bullet pattern, ...) Utilities (gs-u-*) - Standardize things (margins, paddings, display, float,...) Sass Tools - Reusable colour variables and mixins GEL Typography GEL Grid GEL Iconography Localization Content Typography Same one doesn't really work with different scripts. Kerning, line heights, font sizes... Layouts Function flip() for values @if $rtl for properties - {lb} prop {rb} syntax tool How to build your own Choose things Standard spacing unit Breakpoints and typography suited to your content Colour Palette Keep it lightweight Choose patterns carefully Do you really need that variation Communicate with others! Opinion Talk focused on a particular CSS framework, close to what we built with LexiconCSS. Important to check GEL, BBC experience language at least, as a shared trend. Related Links Related Links | Rating --- | --- Grandstand | ★★★☆☆ GEL | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/scaffolding_css_for_scale.md","id":"scaffolding_css_for_scale","url":"/confs/2017_cssconf_eu/scaffolding_css_for_scale.html"},"the_road_for_styled_components":{"title":"The road to styled components: CSS in component-based systems","description":"Building user interfaces on the web is hard, because the web, and thus CSS, was inherently made for documents. Because UIs fundamentally are not documents, we've seen a mindset shift towards building component-based system.\nThe rise of JavaScript frameworks like React, Ember and recently Angular 2, the effort of the W3C to standardize a web-native component system, pattern libraries and styleguides being considered 'the right way to build web applications' and many other things have illuminated this revolution – we are now in the 'Component Age'.\nWith that and a few more things in mind, Max along with Glen Maddern (co-creator of css-modules) sat down and started thinking about styling in this new era. They took the best of CSS and the Web to build a new way to style component-based systems. In this talk, Max will describe what they thought about and why they arrived where they did – <💅> styled-components.","speaker":"Glen Maddern","twitter":"glenmaddern","video":null,"tags":["css","css-in-js"],"layout":"talk","weight":2,"content":" Notes CSS-in-JS is worth your time Separation of concerns is about encapsulation and not technologies Hide implementation details and make it more semantic What if it's worse than just CSS? Styled Components CSS-in-JS for CSS folks / Component-centric styling Encapsulate the relationship between styles and components Builtin theming is really nice Opinion Improvised talk in 24h with good thoughts about where CSS-in-JS fits Related Links Related Links | Rating --- | --- Styled Component. | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/the_road_for_styled_components.md","id":"the_road_for_styled_components","url":"/confs/2017_cssconf_eu/the_road_for_styled_components.html"},"where_does_css_come_from":{"title":"Where does CSS come from?","description":"Understanding how CSS is developed is more than an academic exercise. It gives you a way of understanding why things are weird, which is a good starting point to avoiding or fixing weirdness. It can give you an early heads up as to what might be happening in the very near future. It also opens up an opportunity to be part of the process, to contribute to CSS - just like any open source project. Then once we have new CSS on the horizon, we can all be part of encouraging browser vendors to ship it!","speaker":"Rachel Andrew","twitter":"rachelandrew","video":null,"tags":["css","specs"],"layout":"talk","weight":2,"content":" Notes It comes from 1996 (IE3) Don't break the web! Everything still works. All is backwards compatible Where does it come from today CSS WG Browser vendor members Ebook/Epubs members Specs originate from Browser vendors CSS user agents Companies (adobe) CSS WG itself CSS Grid Spec First public working draft in 2011 A snapshot of the state of a specification at a particular date The editor's draft is the current document It goes back to the CSS Advanced Layout Module spec (2005) Experimental implementations (vendor prefixes or flags) IE10 implemented it as experimental prefixed feature Bloomberg sponsored the implementation in Blink and Webkit With prefixes, features are available, making the spec changes way harder By using experimental impls, community can influence specs - gutter Browsers implement alongside spec development CSS Grid Candidate Recommendation (2016) It is ready to gather implementation experience Proposes recommendation Requires 2 different interoperable implementations of each feature There are at-risk implementations that might not be implemented by 2 diff implementors As of March 2017 Grid is in all Browsers! Why it takes so long? Needs to be implemented Priorities Does it make sense? Will it break anything? Why are some things weird? Opinion Nice overview into the CSS WG and how CSS specs happen, evolve and can be influenced. Related Links Related Links | Rating --- | --- CSS WG Editor Drafts | ★★★☆☆ @csswg | ★★★☆☆ CSS Current Work & how to participate | ★★★☆☆ Report Browser Bugs | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_cssconf_eu/where_does_css_come_from.md","id":"where_does_css_come_from","url":"/confs/2017_cssconf_eu/where_does_css_come_from.html"}},"title":"CSSConf.eu 2017","description":"Dedicated to everyone who loves and writes CSS: On May 5 2017, CSSconf EU will gather the international CSS community in Berlin, Germany. This is your chance to meet top-notch engineers & web designers, world-class speakers, and CSS-loving people at this one-day, one-track conference.","layout":"conference","logo":"cssconfeu.png","icon":"pen","weight":1,"playlist":"PL37ZVnwpeshF0XmpjKBJ3-0kvr3b5ZpJR","content":" {$page.description}","srcFilePath":"src/pages/confs/2017_cssconf_eu/index.md","id":"2017_cssconf_eu","url":"/confs/2017_cssconf_eu","childIds":["a_unified_styling_language","css_art_history_101","css_and_the_first_meaningful_paint","css_and_the_hierarchy_problem","data_sketches_a_visualization_a_month","get_ready_for_the_future_of_css","getting_reactive_with_css","lets_build_a_css_game","scaffolding_css_for_scale","the_road_for_styled_components","where_does_css_come_from"]},"2017_jsday_es":{"title":"JSDayES 2017","description":"JSDayES is a two-day multi-track conference (English & Spanish) focused in Javascript and its ecosystem.","layout":"conference","logo":"jsdayes.png","icon":"table","weight":1,"playlist":"UClqqpvRAqxpLT27rj7vKfOA","content":" {$page.description}","srcFilePath":"src/pages/confs/2017_jsday_es/index.md","id":"2017_jsday_es","url":"/confs/2017_jsday_es","children":{"javascript_en_java":{"title":"JavaScript en Java: diversas formas de ejecutar JavaScript desde la JVM","description":"Hace años, ejecutar JavaScript desde Java podía ser un capricho o una necesidad anecdótica. Pero hoy en día, con más y más proyectos nada triviales en JavaScript que no tienen una alternativa Java, es importante conocer qué posibilidades tenemos para ejecutar JavaScript desde Java y las ventajas e inconvenientes de cada una. Tras un pequeño repaso de las soluciones tradionales como Rhino, veremos con algo más de detalle Nashorn, GraalVM y sobre todo J2V8. Se podría dudar si esta charla no es más adecuada para una conferencia de Java. Pero el propósito, que es tener más plataformas donde poder ejecutar JavaScript, supongo que será mejor recibido en una conferencia sobre JavaScript. Además, en tecnologías como GraalVM y J2V8, Java pasa a ser un actor secundario.","speaker":"Pedro Palao","twitter":null,"video":null,"tags":["js","java","jvm"],"layout":"talk","weight":2,"content":" Notes Closure Compiler better than Babel when generating final code. Babili: a Babel preset to minimize JS without transpiling. Claims that right now Babel implements less ES6 than some browsers because some features (for instance new.target operator cannot be correctly transpiled). States that it would be interesting, given the state of the JS engines on the JVM, to run JS code inside an applet instead of using the browser's built-in JS engine. Claims that the goals of the JS engine are different for server (stability, security, ...) and browser (performance, forgiveness, ...) and that could lead to drop V8 as Node.js' engine. Talks about complexities of the language when implementing an engine: Objects must be stored by reference because they can change type Object classes are not closed Arrays are polymorphic and cannot be treated as fixed size structures Function calls megamorphism: given a call site, it's impossible to infer what will be invoked Need for GC and impossibility of using reference counting V8 internals: More object oriented (as opposed to functional programming) Cannot inline binary code functions, thus it is sometimes faster to stay on JS domain than calling highly optimized binary methods Weird inlining depth limit of 8 which causes deoptimizations that hurt performance. JS engine implementations for the JVM: Oracle Nashorn: Was used as a thorough test for invokedynamic JVM instruction Avatar.js engine Can inline binary code calls as opposed to V8 GraalVM: Intended to implement dynamic languages in the JVM with low-cost interop between them. Only 80k lines of code! JS implementation is the only one that is not opensourced. Goes slows at the beginning but usually has the best performance on the long term because it's the best optimizing. J2V8: V8 bindings for JVM Works like V8 and has the same advantages/limitations of V8 Opinion Very interesting talk on the difficulties of implementing a JS engine and a comparison of JS engines for the JVM. Related Links Related Links | Rating --- | --- Closure compiler | ★★★☆☆ Babili | ★★★☆☆ Oracle Nashorn | ★★★☆☆ GraalVM | ★★★☆☆ J2V8 | ★★★☆☆ new.target operator | ★★☆☆☆ ","srcFilePath":"src/pages/confs/2017_jsday_es/javascript_en_java.md","id":"javascript_en_java","url":"/confs/2017_jsday_es/javascript_en_java.html"},"progressive_image_rendering":{"title":"Progressive Image Rendering","description":"This talk addresses the culprit in page size, images. I feel that we like discussing JS and CSS and its payload, but we tend to forget about images, which represent 2/3 of the bytes of a page. The most performant request is the one that is never done, and this beats any possible image optimization.","speaker":"José Manuel Pérez Pérez","twitter":"jmperezperez","video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes Web performance does not only mean \"page load time\", but also the user perceived performance. Techniques 1) Server side rendering 2) Critical CSS 3) Load JS asynchronously 4) Load fonts asynchronously What about images? They usually represents the 66% of a page. 1) Try to be minimalist and use less images, or CSS where possible. 2) Optimize images and use the correct extension. 3) Use responsive images. Picture tag, img tag with sizes and srcset attributes, ... 4) Lazy-load images. Use the IntersectionObserver API (works also with React). What to show while the image is loading: Nothing. Just keep the width and height of the image Placeholder image Solid color A progressive image that loads on blur-up. Draw with SVG's Example. Cany Edge Detector. Opinion Very interesting and practical talk about how to deal with images not reducing the performance of our page. Also usefull for UX and Designers. Related Links Related Links | Rating --- | --- Slides | ★★★★★ ","srcFilePath":"src/pages/confs/2017_jsday_es/progressive_image_rendering.md","id":"progressive_image_rendering","url":"/confs/2017_jsday_es/progressive_image_rendering.html"},"una_plataforma_de_iot_con_solo_js":{"title":"¿Una plataforma de IoT sólo con JS? Es posible... y además, ¡barato!","description":"Hoy en día ya se está hablando mucho de Internet of Things, plataformas IoT y derivados, pero... ¿te has planteado alguna vez montar la tuya propia? ¿Crees que está fuera de tu alcance? Vente para ver cómo se puede elaborar con muy poco una plataforma IoT, donde capturaremos datos con sensores de luz, de temperatura o incluso la presencia de gas. ¿Y para desarrollar? ¡Suficiente con JavaScript! Conoceremos también otros frameworks JS para interactuar con elementos hardware, a NodeJS como actor principal y veremos cómo poder darle la capacidad de controlar, por ejemplo, las luces de casa. Vamos a montar algo chulo, y si el efecto demo lo permite, haremos uno de los ejemplos en directo con todos los asistentes, ¡no te lo pierdas!","speaker":"José Manuel García García (Sema)","twitter":"semagarcia","video":null,"tags":["js","iot"],"layout":"talk","weight":2,"content":" Notes Examples of use of IoT systems: smart cities like Santander Domotics systems: X10, OSGi, ... X10 explanation IoT platforms/microcontrollers: Raspberry Pi, Arduino, Intel Edison, ... IoT frameworks: Cylon.js (multiplatform), Johnny-Five (mainly Arduino) Base price for an Intel Edison setup around 78€ plus sensors (usually cheap). Demo of Sema IoT platform Opinion Nice demo of IoT setup with several domotics sensors and an Intel Edison microcontroller board. A good place to start if interested in IoT or domotics development. Related Links Related Links | Rating --- | --- JSDayES2017-iot-platform source code | ★★★★☆ Cylon.js | ★★★☆☆ Johnny-Five | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsday_es/una_plataforma_de_iot_con_solo_js.md","id":"una_plataforma_de_iot_con_solo_js","url":"/confs/2017_jsday_es/una_plataforma_de_iot_con_solo_js.html"}},"childIds":["javascript_en_java","progressive_image_rendering","una_plataforma_de_iot_con_solo_js"]},"2017_jsconf_eu":{"children":{"a_brief_history_of_modularity":{"title":"A Brief History of Modularity","description":"“MAKE IT MODULAR,” they said. “IT WILL BE BETTER,” they said. Modularity is a term so common in today’s software industry, that it’s easy to uncritically accept it as a fundamental software development principle. but what does “modularity” actually mean? Where does this idea come from? Where is it going? This talk will walk us through the technical etymology of “modularity”, stepping through the intellectual breakthroughs alongside the fast spread misconceptions. We’ll conclude by exploring the implications of modularity’s ill-examined history on both its current use today, and where it’s heading in the future.","speaker":"Ashley Williams","twitter":"ag_dubs","video":null,"tags":["js","modularity"],"layout":"talk","weight":2,"content":" Notes Who can publish on npm? What goes into a module? People have no idea how or why to module but they felt very strongly good about it Modularity is a way to address the challenge of thining if big deep conceptual hierarchies How small is too small? NMP is up to 2 billion downloads a week, so sth is working and good about small modules Tiny modules improve developer experience, but it doesnt come without a cost The use of modularity has grown to such scale that were being faced wih unexpected issues. Low level programming concepts are more relevant now than ever. The small modules philosophy benefits library writers dd harms end users Software development is change management The goal of modularity is to hide the things that are hard (David Parnas) Write code that is easy to delete Is here a turn back to conservatism? Modularity is an old problem Modularize things for Make things easier for you Hide the hard things Use the tools Opinion Really good talk about modularity with some interesting takes Related Links Related Links | Rating --- | --- npm@5.0.0 | ★★★☆☆ Systemantics | ★★★☆☆ On the Criteria to be Used in Decomposing Systems into Modules | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/a_brief_history_of_modularity.md","id":"a_brief_history_of_modularity","url":"/confs/2017_jsconf_eu/a_brief_history_of_modularity.html"},"a_cartoon_intro_to_webassembly":{"title":"A Cartoon Intro to WebAssembly","description":"WebAssembly is fast. It’s being called “the future of the web”. It’s speed and potential have major browser vendors working together to make it a reality. And it’s on it’s way—the MVP hit multiple browsers in October of last year. But what makes it fast? Starting from the basics, this talk will walk you through what WebAssembly is, and then why it’s fast.","speaker":"Lin Clark","twitter":"linkclark","video":"HktWin_LPf4","tags":["js","performance","webassembly"],"layout":"talk","weight":2,"content":" Notes WebAssembly is so hot right now - skeptical What is WebAssembly A way to run other programming languages on the web other than js Js wasnt designed to be fast (first 10 years) Introduction of JIT compilers in 2008 perfmwars increased perf by 10x and allowed new usages of the lang We're reaching a new inflection point JIT in a nutshell Cose is initially interpreted and monitored Warm paths will be stubbed by the baseline compiler Hot paths are optimized in the optimizer compiler Bailouts happen if optimization assumptions are no longer valid WebAssembly can only get wasm input/output params - integers. Complex types will pass down pointers to the wasm application memory Browsers already ship the MVP of wasm, but it will keep improving Threads with shared memory Direct DOM access Integration with Garbage collection Opinion Nice talk about compilers and webassembly. Very easy to understand, but not very detailed. Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/a_cartoon_intro_to_webassembly.md","id":"a_cartoon_intro_to_webassembly","url":"/confs/2017_jsconf_eu/a_cartoon_intro_to_webassembly.html"},"applying_nasa_coding_standards_to_js":{"title":"Applying NASA coding standards to JavaScript","description":"Jet Propulsion Laboratory - scientific institution making research and development for NASA. Their portfolio includes such famous missions as Curiosity Mars rover and Voyager probe which left solar system after 25 years of flight and still providing scientific information. High level of automation and long duration of missions led to superior demands to software quality. As a result of JPL amazing experience a set of code guidelines was developed and published recently. Since demands to web-driven software constantly increase and more critical tasks are entrusted to JavaScript, lets apply NASA coding guidelines to JavaScript / HTML applications for higher performance, reliability and the better world.","speaker":"Denis Radin","twitter":"PixelsCommander","video":null,"tags":["js","guidelines"],"layout":"talk","weight":2,"content":" Notes The universe favors unification Unification never stops Scared flying JS driven airplane? Lack of trust in the web platform, lack of guidelines, and low price of mistakes makes the perception of the JS language be seen as unreliable Code guidelines can help Readability - No function should be longer than what can be printed in a sheet of paper - Do just one thing Predictabilty - Restrict all code to very simple control flow constructs. Do not use goto statements, redirections or recursions - Static analysis, metrics Respect RAM - Do mot use dynamic memory allocation after initialization - Measure and compare All loops must have a fixed upper-bound Test well - The assertion density of the code should average to a minimum of two assertions per function No shared state - Data objects must be declared at the smallest scope of code The return value of non-void functions must be checked by each calling function The use of the preprocessor must be limited - Nice to know when to use transpilers. The code you write is not the one it runs. You dont own it and it has a price LoD - The use of pointers should be restricted - Small call chains 10. Keep green - All code must be compiled, from the first day of development, with all compiler warnings enabled Opinion Overview of NASAs code guidelines and how it can be applied to JS development to improve the perception of the language, paltform and coders. Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/applying_nasa_coding_standards_to_js.md","id":"applying_nasa_coding_standards_to_js","url":"/confs/2017_jsconf_eu/applying_nasa_coding_standards_to_js.html"},"barriers_to_entry_in_the_js_community":{"title":"Barriers to Entry in the JavaScript Community","description":"In this talk, I’ll share what it was like for me as a new JavaScript programmer from a minority background. We’ll then discuss some ideas for creating more welcoming environments. I decided to teach myself programming while working on a startup. When I started out in the JavaScript world, I encountered a variety of challenges. I tried participating in various communities but felt out of place. It was difficult for me to ask questions and I rarely met anyone from a similar background. There were also many people I met along the way who helped me grow as a programmer. We’ll talk about the obstacles that I faced, how I overcame them, and offer suggestions for what we can do to lower the barriers to entry for others.","speaker":"Khalid","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes Opinion Related Links Related Links | Rating --- | --- foo | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/barriers_to_entry_in_the_js_community.md","id":"barriers_to_entry_in_the_js_community","url":"/confs/2017_jsconf_eu/barriers_to_entry_in_the_js_community.html"},"building_high_quality_javascript_tools":{"title":"Building High-Quality JavaScript Tools","description":"Jest was adopted widely across 100s of companies recently and provides an immersive testing experience. We’ll take a deeper look at JavaScript Testing with Jest and what it takes to turn a tool into a product with a delightful experience.","speaker":"Chris Pojer","twitter":null,"video":null,"tags":["js","tooling"],"layout":"talk","weight":2,"content":" Notes We need to keep investing into developer experience Look at tools with a product mind Performance Features Adoptability In the process Fix Rewrites Polish Performance Apply 1% improvements incrementally Features Improved output The real value is when a test is failing Immersive Watch Mode Snapshot assertion Preventing a lot of issues fast They don't replace other assertions Multiproject Runner The experience should be delightful Adoptability Minimal configuration OOTB test setup in react-native and react-native-app Create tooling (yarn create) Translations Modularity Packages help with separation of concerns and helps turn something into a platform Consolidate infrastructure Share best practices If you improve experience, developers use it more. 35% increase in number of tests in fb since adoption. Opinion Interesting take on the importance of building nice, helpful tools Related Links Related Links | Rating --- | --- Jest | ★★★☆☆ jest-codemods | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/building_high_quality_javascript_tools.md","id":"building_high_quality_javascript_tools","url":"/confs/2017_jsconf_eu/building_high_quality_javascript_tools.html"},"can_you_read_me_creative_js_to_make_computer_science_fun":{"title":"Can You Read Me? Creative JavaScript to Make Computer Science Fun","description":"Two web developers who are full of curiosity to learn all about machines and code met at a meetup. Unsatisfied with traditional computer science textbook and what we felt like not so learner friendly software engineering landscape, we decided to learn by working together in the format we enjoy the most - creative project. We are building machines (both software and hardware) in JavaScript to send secret messages to each other. Different forms of data blob are exchanged periodically as a message. In order to read those messages, each has to learn and build a system to decode the data. This talk will tell the story of the machines, their parts, and the possibilities of remote creative collaboration. You’ll come away with fresh inspiration on how JavaScript can be used to learn computer science concepts the enjoyable way.","speaker":"Mariko Kosaka & Suz Hinton","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes Opinion Related Links Related Links | Rating --- | --- foo | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/can_you_read_me_creative_js_to_make_computer_science_fun.md","id":"can_you_read_me_creative_js_to_make_computer_science_fun","url":"/confs/2017_jsconf_eu/can_you_read_me_creative_js_to_make_computer_science_fun.html"},"down_the_rabbit_hole_js_in_wonderland":{"title":"Down the Rabbit Hole: Javascript in Wonderland","description":"What even makes sense in Javascript? For a language originally created in 10 days it surely has a lot of quirks and perks many JS developers are unaware of. Sometimes, it might even seem like we fell down the rabbit hole only to find that NaN is actually a Number, undefined can be defined, +!![] equals 1, Array.sort() may not work as you suspected and so much other nonsense that can trip any JS developer’s mind. This talk is a collection of Javascript’s oddities and unexpected behaviors that hopefully will prevent some future headaches and help understand the language that we all love in a more deeper and meaningful way.","speaker":"Claudia Hernández","twitter":"koste4","video":null,"tags":["js","internals"],"layout":"talk","weight":2,"content":" Notes Weird things NaN is not a NaN Arrays sort lexicographically by default, not numerically The ~ operator for loops have all loops optional undefined could be redefined in older browsers non alphanumeric js Opinion Light talk about some js quirks Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/down_the_rabbit_hole_js_in_wonderland.md","id":"down_the_rabbit_hole_js_in_wonderland","url":"/confs/2017_jsconf_eu/down_the_rabbit_hole_js_in_wonderland.html"},"dynamic_video_in_the_browser":{"title":"Dynamic video in the browser","description":"Rather than just playing videos in the browser; what if you could edit and composite them on the fly? Just as the Web Audio API allowed for dynamic audio manipulation, we can now do similar things for video, opening up the creative possibilities for interactive visual experiences on the web. In this talk I’ll show you how, with some live coded demos using an open source library. I’ll also talk about how the BBC is using these techniques to explore the future of TV.","speaker":"Matthew Shotton","twitter":"MathewShotton","video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes VideoContext Make interactive video on the web very easily Like WebAudio API Cut, sequence, play clips Real-time graph and timeline modifications Mobile support Integrates with A-Frame Reading video.currentTime is not frame accurate Use requestAnimationFrame Switching tabs stops Use a serviceworker to keep the clock running No auto playing video on mobile Pool of activated elements No low-level APi for syncing video playback No solution for this. If buffering happens... eh :) Object Based Media Bringing responsive design to broadcasting Opinion Cool presentation of BBCs work on video on the web Related Links Related Links | Rating --- | --- VideoContext | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/dynamic_video_in_the_browser.md","id":"dynamic_video_in_the_browser","url":"/confs/2017_jsconf_eu/dynamic_video_in_the_browser.html"},"emoji_web_components_and_art":{"title":"Emoji, Web Components, and Art","description":"Making art on the web is easy, if you got the right tools. HTML has styled divs. JavaScript has canvas. I have an emoji keyboard. But what if our tools were better, and making art was easier? What if there was a magical widget that transformed any word into emoji word art? Or an image into pixels, which you can then style with CSS? What if it was easy to build these tools, embed them on any sites, and give them out to people, so that they can make art? Spoilers: it is, and I’m going to tell you about it.","speaker":"Monica Dinculescu","twitter":"notwaldorf","video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes People enjoy doing things even if they're not good at it if you give them the right tools. The web is good at Semantics Encapsulation Web Components Make apps with components Data is bindable (polymer) Opinion Funny talk about components in apps Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/emoji_web_components_and_art.md","id":"emoji_web_components_and_art","url":"/confs/2017_jsconf_eu/emoji_web_components_and_art.html"},"go_offline_first_to_save_the_world":{"title":"Go Offline First to Save The World","description":"We’re accustomed to great connectivity but what if you need to access important info when you’re disconnected? This session will uncover the approaches used in successful real world examples of Offline First and show you the tools and techniques that will allow you to build the same kinds of things. From supporting hospitals in Africa to providing electric power to Haiti to supporting families in rural Alaska, the Offline First approach to app development is truly saving the world.","speaker":"Maureen McElaney","twitter":"Mo_Mack","video":null,"tags":["js","mobile"],"layout":"talk","weight":2,"content":" Notes Offline is NOT an error condition Challenges Sync conflicts are hard Security is hard Design patterns are hard (still being invented, no standard) Freshness Reach Assurance By designing for low latency first, you improve performance Opinion Related Links Related Links | Rating --- | --- Dat | ★★★☆☆ Offline First | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/go_offline_first_to_save_the_world.md","id":"go_offline_first_to_save_the_world","url":"/confs/2017_jsconf_eu/go_offline_first_to_save_the_world.html"},"how_to_be_a_web_artist":{"title":"How To Be A Web A/V Artist","description":"Come and be fascinated by the world of audio visualisation in a browser. This isn’t just about creating stunning data vis to music! We see how we can pipe data realtime into custom properties to enhance our visuals. The speaker re-addresses how we analyse sound via the Web Audio API and proposes a better way of processing the data to better suit music. And, to top it all off, we harness the Web MIDI API for full hardware control as well. You may not think it, but this really is a talk with a great deal of take-aways and new techniques for you to consider in your coding life.","speaker":"Ruth John","twitter":"Rumyra","video":null,"tags":["js","data-visualization"],"layout":"talk","weight":2,"content":" Notes Tons of APIs for VJs today The Audio API can create oscillators, analyze sounds and gives us an array of freq velocities. Use the power of the CSS and native features - custom properties Data can be better, and it's not always suited for the visualization you want. You want to normalize and adapt it properly even if the API doesn't provide it Opinion Nice view on a/v ecosystem and some tips. Not very deep Related Links Related Links | Rating --- | --- Web Audio API | ★★★☆☆ Web Media APIs 2017 | ★★★☆☆ Web MIDI API | ★★★☆☆ live:js | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/how_to_be_a_web_artist.md","id":"how_to_be_a_web_artist","url":"/confs/2017_jsconf_eu/how_to_be_a_web_artist.html"},"how_to_break_an_api":{"title":"How to Break an API: How Community Values Influence Practices","description":"Breaking the API of a package can create severe disruptions downstream, but package maintainers have flexibility in whether and how to perform a change. Through interviews and a survey, we found that developers within a community or platform often share cohesive practices (e.g., semver, backporting, synchronized releases), but that those practices differ from community to community, and that most developers are not aware of alternative strategies and practices, their tradeoffs, and why other communities adopt them. Most interestingly, it seems that often practices and community consensus seems to be driven by implicit values in each community, such as stability, rapid access, or ease to contribute. Understanding and discussing values openly can help to understand and resolve conflicts, such as discussions between demands for more stability and a pursuit of frequent and disruptive innovations.","speaker":"Christian Kästner","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes Culture matters Different Values Different Trade-Offs Different cost allocations Different challenges Two extremes Cost on the users, easy to break things from the maintainers Cost on the maintainers, not allowed to break things Eclipse community Backwards compatibility Characteristics Stable platform, convenient to use Yearly updates are sufficient to many Consequences Perceived stagnant development, stale platform Difficulty recruiting releases Painful using R community The most recent version of all packages shall be compatible (snapshot consistency) Characteristics Short release cycles, compatibility Consequences Urgency and reacting to updates as burden Aggressive reduction of dependencies (code cloning) High gatekeeping creates friction node community Open to rapid change and experiments. Low barrier to entry. Easy and fast for developers to publish and use packages Characteristics Openness, attractive to devs Consequences Unstable, no quality control Rapid change requires constant maintenance Opinion Show of the results of an academic research. How to do something depends on the community values Related Links Related Links | Rating --- | --- breakingapis | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/how_to_break_an_api.md","id":"how_to_break_an_api","url":"/confs/2017_jsconf_eu/how_to_break_an_api.html"},"immutable_data_structures_for_functional_js":{"title":"Immutable data structures for functional JS","description":"Functional programming has been gaining a lot of popularity in the JS community, and with good reason: rejecting side-effects and mutability - in-place changes to data - helps avoid a lot of headaches. But when you refuse to mutate objects, you have to create a whole new object each time something changes, which can slow things down and eat up memory, making functional programming seem inefficient. That’s where immutable data structures come in - to save the day, and time and space! Also called “persistent data structures”, they help you efficiently make new “modified” versions of immutable objects, by reusing parts of the old object that you don’t need to change. In this talk we’ll take a look at how these data structures work, why they’re fantastic for functional programming, and how we can easily use them in our JS code thanks to libraries like Mori and Immutable.js.","speaker":"Anjana Vakil","twitter":"AnjanaVakil","video":"Wo0qiGPSV-s","tags":["js","immutable","data-structures"],"layout":"talk","weight":2,"content":" Notes Functional Programming rocks - Immutability rocks Data in Data out, no side effects With mutability come overhead and bugs Challenges of immutability Speed Memory Immutable Data Structures don't change Persistent Data Structures keep old versions around Representing data as shared trees solve this by Path copying Structural sharing This structure is called a trie Leaves hold values Paths are keys Use binary as encoding keys, but 32-way usually works best - Bitmapped Vector Trie If the key is not binary, it can be hashed - Hashed Array Mapped Trie Opinion A basic talk about immutability, but interesting implementation explanation. Related Links Related Links | Rating --- | --- mori | ★★★☆☆ immutable-js | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/immutable_data_structures_for_functional_js.md","id":"immutable_data_structures_for_functional_js","url":"/confs/2017_jsconf_eu/immutable_data_structures_for_functional_js.html"},"js_engines_how_do_they_even":{"title":"JavaScript engines how do they even?","description":"Want to know how JavaScript engines work? Why is JavaScript so fast? What is just-in-time compilation? We’ll look at basic concepts of compilers, challenges posed by modern JavaScript, and how to write compiler-friendly JavaScript.","speaker":"Franziska Hinkelmann","twitter":"fhinkel","video":"iiEDtpy6I","tags":["js","v8","engines"],"layout":"talk","weight":2,"content":" Notes Many js engines nowadays that help competition and improvement Even thiugh being dynamically typed makes it harder to optimize, js is really fast - JIT (generate machine code during runtime, not ahead of time) Optimizing Compiler Re-compile hot functions with type information from previous executions De-optimize if the type has changed - Don't change types In V8, the baseline compiler is Ignition and the optimizer is Turbofan Object Types Optimized compiled code makes use of observed types (internal representation) to run faster. It accepts up to 4 type shapes or 312 in a less optimized version. Always construct the same type of objects! Try experiments with Node and Chrome is possible Write code that looks like statically typed Opinion Great talk about the internals of V8 and the optimizer. Related Links Related Links | Rating --- | --- Ignition | ★★★☆☆ TurboFan | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/js_engines_how_do_they_even.md","id":"js_engines_how_do_they_even","url":"/confs/2017_jsconf_eu/js_engines_how_do_they_even.html"},"keep_the_internet_weird":{"title":"Keep the Internet Weird","description":"The early 2000s bred a new generation of web developers and designers out of the pure need of creative expression. Teens didn’t have access to StackOverflow, and couldn’t easily Google their coding problems—so they turned to each other. Through collaboration and inspiration from others that were blazing their own way, they created their own unique personal sites without any regard for standards. Let’s explore the world of CSS via ‘filter: dropshadow’, JavaScript snippets, 8 pixel fonts and take a look back at what the web looked like before we followed the rules.","speaker":"Rachel White","twitter":"ohhoe","video":null,"tags":["js","community"],"layout":"talk","weight":2,"content":" Notes When communities are nice, more people want to be a part of it Gamification screw it up (hackernews, stackoverflow,...) because people helping want to be heard, not to help Opinion Talk about how to get back a healthy community, foster growth and not be afraid Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/keep_the_internet_weird.md","id":"keep_the_internet_weird","url":"/confs/2017_jsconf_eu/keep_the_internet_weird.html"},"lets_go_big":{"title":"Let's go big","description":"Do you feel limited, boxed in, like you are unable to grow? Try to imagine how numbers in JavaScript feel - they are stuck between +/- 9007199254740991. Unable to breathe, they are stuck. I will talk about how we can free numbers in JavaScript to represent values much larger than their natural constraints. The talk will navigate through increasingly creative techniques to represent numbers of ever increasing values - freeing numbers from their constraints as well as ourselves.","speaker":"Alexander Reardon","twitter":"alexandereardon","video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes JS adds constrains to numbers because of how it represents and stores them Techniques Decimal strings ('125') - only 2^27, so new max is 10^2^27 Binary strings ('100110') - smaller than the previous, but still huge Hex strings ('7FE') - a bit bigger than dec strings but harder to substract Unicode strings ('👌d€') 16bit Array of unicode strings ... Files :) What about memory... impractical as numbers grow We can do almost any operation if we can add Streaming it using utf and storing the result, calculating a char at a time can skip the memory problem and go directly to storage Arithmetic could even be distributed over the network Opinion Interesting and practical talk about techniques to deal with huge numbers Related Links Related Links | Rating --- | --- big-number-demos | ★★★☆☆ TC-39 BigInt proposal | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/lets_go_big.md","id":"lets_go_big","url":"/confs/2017_jsconf_eu/lets_go_big.html"},"maintaining_an_oss_project":{"title":"Maintaining an OSS Project (Babel)","description":"How did piece of satire lead to a ASCII picture of Guy Fieri getting merged into the Babel source and our t-shirt design? Who is left_pad? How did I go from complete ignorance of one of the biggest tools used in the JavaScript ecosystem to becoming a user, contributor, and eventually maintainer? What are some of the interesting stories that maintaining a project lead to? In this talk, I hope to bring home the fact maintainers are just developers and people like everyone else.","speaker":"Henry Zhu","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes Opinion Related Links Related Links | Rating --- | --- foo | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/maintaining_an_oss_project.md","id":"maintaining_an_oss_project","url":"/confs/2017_jsconf_eu/maintaining_an_oss_project.html"},"making_the_jump":{"title":"Making the Jump: How Desktop-Era Frameworks Can Thrive on Mobile","description":"Today’s most popular frameworks come from a time when the world was a different place. Ember’s first rendering engine, for example, was optimized around the performance gotchas of Internet Explorer 6. IE6 has since faded into history, and smartphones with spotty connectivity and occasionally dodgy hardware have become the lowest common denominator that we must optimize for. In this talk, we’ll discuss how smartphones fundamentally change the assumptions we make about architecting applications for the web. Then, we’ll cover how we can embrace these new mobile constraints to build even better apps—for everyone. Finally, we’ll look at the techniques used by desktop-era libraries and what they’re doing to become great for the mobile web.","speaker":"Tom Dale","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes How can things made for the desktop make the jump to the phones There are more differences than the obvious ones... how focused is the user? For many people, the first computer is a phone. The more global your app is, the more varied ecosystem you need to support Its easy to optimize for one combination at the cost of other Progressive Enhancement is the usual answer Browsers improve radically which doesnt seem to translate into applications The simplicity fetish simple = small = fast = good complex = big = slow = bad Modern frameworks are compilers Static Analysis vs Dynamic analysis Render vs Re-render Opinion Talk what the big players are doing with their frameworks, turning them into compilers Related Links Related Links | Rating --- | --- Tsickle | ★★★☆☆ glimmer | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/making_the_jump.md","id":"making_the_jump","url":"/confs/2017_jsconf_eu/making_the_jump.html"},"outbreak_index_sw":{"title":"Outbreak: index-sw-9a4c43b4b4778e7d1ca619eaaf5ac1db.js","description":"August 30, 2016, was by all accounts an average Tuesday, and release number 523 just a simple re-factor, but something went horribly wrong that day: bad code escaped from the office, and it quickly spread to infect tens of thousands, giving rise to a hoard of zombie ServiceWorkers! This is a disaster about a typo. This is a thriller about technology out of control. This is a tragedy about wasted CPU cycles. This is a cautionary tale about living in the age of ServiceWorker.","speaker":"Alexander Pope","twitter":"popeindustries","video":"CPP9ew4Co0M","tags":["js","security"],"layout":"talk","weight":2,"content":" Notes Opinion Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/outbreak_index_sw.md","id":"outbreak_index_sw","url":"/confs/2017_jsconf_eu/outbreak_index_sw.html"},"parsing_js_better_lazy_than_eager":{"title":"Parsing JavaScript - better lazy than eager?","description":"Parsing JavaScript fast is critical for fast web page startup. We’ll look at challenges posed by complex frameworks and new language features and how V8, the JavaScript engine behind Google Chrome, solves them. You’ll learn how to write and bundle your code in a way that is fast to parse. Some topics I’ll cover in the talk: How does V8 parse JavaScript and how does it decide what parts to parse / compile upfront? Recent and upcoming improvements in the area of parsing JavaScript better. What should developers do to make parsing be less of a bottleneck? Why is benchmarking parsing hard?","speaker":"Marja Hölttä","twitter":null,"video":null,"tags":["js","v8","engines"],"layout":"talk","weight":2,"content":" Notes What is parsing JS source code - parser - AST - scope analysis Parsing is in the critical path of web apps startup How does V8 parse Js Parser: full, eager Parsing functions to compile AST Scropes Finds syntax errors Preparser: fast, lazy Used for skipping over functions, just finds the end 2.5x faster than parser Heuristics to decide wether to parse eagerly or lazily Rules not specified in the spec Free to implement in the browsers V8 tries to guess and eager parse, but lazy parses the rest Lazy parsing inner functions is harder because of the function contexts. It is heavier than lazy parsing top-level functions. Modern js is heavily nested paying a price for it. Parsing is hard because of some ambiguities. V8 parses very forgivingly until it can decide on ambiguous constructs but it never rewinds. What to do Ship less js Use code coverage to re,ove code and dependencies Measure the parse cost Code caching in V8, caches bytecode of frequently used scripts - bundling affects this Use streaming Avoid eval Use the parens hack selectively Opinion Related Links Related Links | Rating --- | --- optimize-js | ★★★☆☆ JS Startup Performance | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/parsing_js_better_lazy_than_eager.md","id":"parsing_js_better_lazy_than_eager","url":"/confs/2017_jsconf_eu/parsing_js_better_lazy_than_eager.html"},"preact_into_the_void":{"title":"Preact: Into the void 0","description":"Front-end developers sit atop a massive amount of technology, often treating whole pieces of our application as opaque functionality. Grab a hard hat and follow me down into the internals of Preact, a tiny 3kb alternative to React. Along the way we’ll shed light on fundamentals like JSX & Virtual DOM, demystify DOM diffing, and see how keys work up-close. On our way back to the surface, we’ll stop at the Museum of Lost Hours to see some performance and size optimizations. Hope you’re not afraid of the dark!","speaker":"Jason Miller","twitter":"developit","video":"LY6y3HbDVmg","tags":["js","performance"],"layout":"talk","weight":2,"content":" Notes Constraints are challenges JSX XML-liked expression compiled to a function call Factory function - createElement, calls inserted Nothing to do wih the DOM, just a representation Simple renderer works but is awful - diffing In VDom, keys attribute meaningful order to a set of uniform elements Performance The DOM is slow DOM is accessible DOM is extendable DOM is framework agnostic Your DOM is slow Use textNodes for text avoid (DOM) getters avoid Live NodeLists Measure Chrome devtools IRHydra ESbench Lessons Be explicit Inline helpers. Functions can be too generic and get deopted Short-Circuiting Make decisions based on data Opinion Good talk showcasing some algorithms and inner workings from the preact auhor. Related Links Related Links | Rating --- | --- HyperScript | ★★★☆☆ IRHydra2 | ★★★☆☆ ESBench | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/preact_into_the_void.md","id":"preact_into_the_void","url":"/confs/2017_jsconf_eu/preact_into_the_void.html"},"real_world_connectivity_beyond_the_bubble":{"title":"Real world connectivity: Beyond the bubble","description":"Every talk you’ll hear about ‘web performance’ will tell you that shaving 100ms from response time produced a 1% sales yield for Amazon, or maybe that 40% of web visitors will abandon your site when it takes more then 3 seconds to load? While those are impressive, there are some more interesting metrics that we need to talk about. Did you know that 43% of the humans on this planet have access to the internet, but 57% do not? Did you know that in 2016 India brought 100 million NEW users to the internet for the very first time? When you take a glance into the current state of global connectivity, you might realise that the internet you think you know so well exists on an entirely different plane. Through the guise of user-experience and empathy, we’ll study the state of global connectivity, connection speeds, population, and the costs of data in order to re-centre how we think about our role as designers and developers for the web today.","speaker":"Ben Schwarz","twitter":"benschwarz","video":null,"tags":["js","performance","mobile"],"layout":"talk","weight":2,"content":" Notes State of global connectivity 7.4 billion people, 53% don't have access to internet Data plans are very expensive depending on the region and normalized to the wages Average LTE speed also changes 60% of mobile connections are 2G At the moment, today, the Moto G4 would be the average phone We need to stop optimizing for 3000$ phones in fast connections Beyond Delivery, Asset Lifetime Delivery Parse - we often forget Runtime On average, 410kb is the average of scripts on the web - but it is really 3-4 Mb The metrics that we're currently using don't tell us much about user experience First Paint Visual Complete Time to interactive - 5 seconds without long js tasks Don't try to keep people in your sites as long as possible, help the, achieve their goal fast Opinion Interesting talk about the global state of connections and he mobile ecosystem. Related Links Related Links | Rating --- | --- Lighthouse | ★★★☆☆ Calibre | ★★★☆☆ State of the Internet Report | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/real_world_connectivity_beyond_the_bubble.md","id":"real_world_connectivity_beyond_the_bubble","url":"/confs/2017_jsconf_eu/real_world_connectivity_beyond_the_bubble.html"},"sequential_art_comics_and_svgs":{"title":"Sequential Art, Comics & SVGs","description":"Creative expression on the web shouldn’t be limited to people who know how to code. In this talk, we’ll explore how to repurpose the sophisticated tools that designers already know to build interactive, dynamic art on the web. I’ll demonstrate this principle through a JavaScript library that allows designers to create full-bleed animated comics, graphic novelas, story boards, sequential art and so on, using a tool they already know: Adobe Illustrator. By combining SVGs with powerful three-dimensional motion effects, we’ll learn how to tap into unexplored capabilities in the browser and break out of the 1D world and into the 3D universe. We’ll use simple techniques to build animations that are high-resolution, performant, and best of all, easily accessible to designers by allowing them to use their own tools to “code” in their own language and thus deliver cinematic-quality stories on the web without ongoing engineering assistance.","speaker":"Zahra Jabini","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes One image is just an image, but juxtaposed to another one, it conveys a complete different meaning - comic Print Comics - Post Print Comics Parallax adds depth and physicality Use perspective css property Support of css transforms and svgs is sketchy Opinion Talk about how to use svgs to create interactive comics Related Links Related Links | Rating --- | --- Bustle | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/sequential_art_comics_and_svgs.md","id":"sequential_art_comics_and_svgs","url":"/confs/2017_jsconf_eu/sequential_art_comics_and_svgs.html"},"the_browser_hackers_guide":{"title":"The Browser Hackers Guide To Instantly Loading Everything","description":"Venture deep into the belly of the browser to uncover the secret incantations to instantly load anything. We’ll even back it up with rock-hard data. Will we use preload, prefetch and preconnect? What about HTTP/2 Server Push? or Service Worker? and how the heck do we ship JavaScript bundles that don’t break the bank on mobile? Discover this and more tips to delight your users in the Browser Hacker’s guide to instantly loading EVERYTHING.","speaker":"Addy Osmani","twitter":"addyosmani","video":null,"tags":["js","performance"],"layout":"talk","weight":2,"content":" Notes Average on mobile 2017 16s to interactive 19s fully loaded 420kb js Test on real phones and real networks Goal TTI < 5s Only load what you need code-splitting tree shaking the frameworks take a lot of headroom from your app Only transpile what you need Order loading thoughtfully When everything is high priority, nothing is HTTP/2 vs preload Cache aggresively and granularly Opinion Nice talk about performance on the web Related Links Related Links | Rating --- | --- Lighthouse | ★★★☆☆ Calibre | ★★★☆☆ WebPageTest | ★★★☆☆ re:loading | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/the_browser_hackers_guide.md","id":"the_browser_hackers_guide","url":"/confs/2017_jsconf_eu/the_browser_hackers_guide.html"},"the_ethics_of_the_internet_of_things":{"title":"The Ethics of the Internet of Things","description":"The Internet of Things is quickly entering our lives with stunning feats of innovation–and sometimes absurdity. Internet connectivity in household and industrial devices truly holds a great deal of promise, but is the pace of innovation too fast and is the design praxis sufficiently rigorous? Is JavaScript well-suited to control devices that can cause material and physical harm? By way of case study, this talk explores ethical issues with IoT technologies and transfers lessons learned from biomedical, automotive, and aerospace engineering industries.","speaker":"Emily Gorcenski","twitter":"EmilyGorcenski","video":"xLL7Fo_em2E","tags":["js","iot"],"layout":"talk","weight":2,"content":" Notes Opinion Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/the_ethics_of_the_internet_of_things.md","id":"the_ethics_of_the_internet_of_things","url":"/confs/2017_jsconf_eu/the_ethics_of_the_internet_of_things.html"},"the_legacy_of_the_js_community":{"title":"The Legacy of the JavaScript Community","description":"","speaker":"Whitney Williams","twitter":"whitneyhacks_","video":null,"tags":["js","community","inspiration"],"layout":"talk","weight":2,"content":" Notes Small actions have big impact The actions that we take right now can have months to take full effect. What can we do to push the community and how do we want it to look in he future? Our community needs leaders Legacy It's usually perceived as a negative, old, buggy thing in the software world A body of persons sent on a mission (original description) Purpose & People JS is the people and the community that support and use the language and not the language itself People first. Always A lot of people tend to look down on us as less than a developer. Our heritage is a belief in the power of the web. We must create the culture we hope to carry forth Everybody is enough, everybody belongs Small actions can create huge an unpredictable impact. Opinion Inspirational talk about what means being part of the JS community and where it should go. Got several ovations during the talk. Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/the_legacy_of_the_js_community.md","id":"the_legacy_of_the_js_community","url":"/confs/2017_jsconf_eu/the_legacy_of_the_js_community.html"},"unconscious_bias_we_are_all_guilty":{"title":"Unconscious Bias: we're all guilty","description":"JavaScript Style Sheets (JSSS) was a technology introduced by Netscape in 1996. Chances are, you’ve never heard of JSSS, since it was available in Netscape Communicator 4.0. They allowed you to define custom styling rules for your web pages. You’re probably more familiar with its competitor at the time—CSS. They were pretty cool though. JSSS allowed the developer to style the DOM using a full programming language with variables, conditionals, and functions. The obvious spoiler alert here is that CSS won and JSSS lost, right? It’s not that simple. A lot of the ideas from JSSS have slowly been creeping back into our toolset. SASS brought programming logic back into styling our applications. CSS picked up variables and the ability to do calculations. Finally, the React community has been—maybe unknowingly—bringing JSSS back from the dead. In this talk, we’ll take a good hard look at JSSS and the ways in which JSSS has had enduring legacy after its untimely demise.","speaker":"Steve Kinney","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes Opinion Related Links Related Links | Rating --- | --- foo | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/unconscious_bias_we_are_all_guilty.md","id":"unconscious_bias_we_are_all_guilty","url":"/confs/2017_jsconf_eu/unconscious_bias_we_are_all_guilty.html"},"whats_new_in_netscape_navigator_2":{"title":"What's new in Netscape Navigator 2.0","description":"How can we know how good we’ve got it without really understanding how good we used to have it? JavaScript was first released with Netscape Navigator 2.0 in September 1995 - can an application from today exist in the browsers of yesterday? Just how different was the development experience then compared to now? Is it feasible to implement a modern Web application in the browser that pioneered client-side development? What would code from 1995 look like rewritten with today’s JavaScript?","speaker":"Marcin Szczepanski","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes 1995 Netscape 2.0 was released. At the time it was mostly used for form validation, since server trips were expensive Goal Implement TodoMVC in Netscape 2.0 Challenges The src attribute was not supported There was no dom api, you couldn't change it without reloading Error handling No console There were no arrays in JS 1.0 Only global functions No addeventlistener and limited event handlers Styling was very limited Opinion A retrospective to show how much the web has evolve an appreciate it Related Links Related Links | Rating --- | --- ","srcFilePath":"src/pages/confs/2017_jsconf_eu/whats_new_in_netscape_navigator_2.md","id":"whats_new_in_netscape_navigator_2","url":"/confs/2017_jsconf_eu/whats_new_in_netscape_navigator_2.html"},"yes_your_site_can_be_accessible":{"title":"YES, your site too can (and should) be accessible. Lessons learned from building FT.com","description":"In 2016, we at The Financial Times launched a new version of our website to great success. It broke ground on key areas in which we’d set out to excel and measured very closely, like performance, resilience and usability. But one day, and rather serendipitously, we realized we had largely forgotten to measure one thing: accessibility. And you can’t improve what you don’t measure. In this talk I will go over how we went from being generally oblivious about accessibility to making it a core part of our process across multiple divisions. I will share the roadblocks we found and the lessons we learned, along with tangible solutions you can integrate them into your own project today, regardless of available time, budget or support.","speaker":"Laura Carvajal","twitter":"lc512k","video":null,"tags":["js","accessibility"],"layout":"talk","weight":2,"content":" Notes FT was very good, but when they checked, they weren't doing good on accessibility Accessibility doesn't just happen, you need to make it happen Accessibility goes beyond not denying access but making sure it is fair 1 Billion people (15%) with disabilities, but you need to adapt it to your audience. In the case of FT, 26% Before setting the build on fire, train people Manual checks are still needed External audit Digital Accessibility Center Customer research DIY (learn to use assistive tech) Keyboard only High contrast VoiceOver Throw away your mouse Don't take it all on yourself Do a contest to raise awareness and empathy Talk about it a lot Diversity improves your product, your team, and yourself Opinion Nice insights about the process of becoming accessible and lessons learned. Related Links Related Links | Rating --- | --- pa11y | ★★★☆☆ WCAG 2.0 | ★★★☆☆ Web Accessibility Tutorial (Udacity) | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/yes_your_site_can_be_accessible.md","id":"yes_your_site_can_be_accessible","url":"/confs/2017_jsconf_eu/yes_your_site_can_be_accessible.html"},"you_dont_need_amp_for_that":{"title":"You don't need AMP for that","description":"But it makes things so nice and easy :) AMP at its heart is a JavaScript library for building super fast static web pages. Being purely web tech based, we can understand how it works and take the best ideas and use them in non-AMP projects. This talk will dig into the nitty gritty details of AMP and uncover how the sausage is made so to say. We’ll talk about network concurrency, font loading, image optimizations, and this magic thing called pre-rendering. Even if you never plan to use AMP, you’ll learn new tricks that you’ll be able to use to speed up your next project!","speaker":"Chen Shay","twitter":null,"video":null,"tags":["js"],"layout":"talk","weight":2,"content":" Notes Steps taken in AMP Unblock the render Scripts are async (do not block the render) Inline CSS (limit CSS to 50kb) 3rd party JS only in sandbox iframes Resource priorization Preconnect (videos to sources) Don't be flashy Invisibility trick to avoid fouc Stop shifting Static resource sizing Minimize style recalculations batching reads and writes max of 1 style recalc per frame 2 style recalcs per page load GPU optimizable animations only Optimize Cache Efficient prerendering Code optimizations with closure compiler and amp optimizations on top Opinion Step by step guide into what needs to be done to comply with AMP Related Links Related Links | Rating --- | --- AMP | ★★★☆☆ ","srcFilePath":"src/pages/confs/2017_jsconf_eu/you_dont_need_amp_for_that.md","id":"you_dont_need_amp_for_that","url":"/confs/2017_jsconf_eu/you_dont_need_amp_for_that.html"}},"title":"JSConf.eu 2017","description":"JSConf EU is a professional, not-for-profit, labour-of-love conference for the JavaScript community. It’s a two day affair, with many related side events in the days surrounding it. JSConf EU is an invitation for the community to come together and for new people to get to know and join the community.","layout":"conference","logo":"jsconfeu.png","icon":"heart-full","weight":1,"playlist":"PL37ZVnwpeshFmAPr65sU2O5WMs7_CGjs_","content":" {$page.description}","srcFilePath":"src/pages/confs/2017_jsconf_eu/index.md","id":"2017_jsconf_eu","url":"/confs/2017_jsconf_eu","childIds":["a_brief_history_of_modularity","a_cartoon_intro_to_webassembly","applying_nasa_coding_standards_to_js","barriers_to_entry_in_the_js_community","building_high_quality_javascript_tools","can_you_read_me_creative_js_to_make_computer_science_fun","down_the_rabbit_hole_js_in_wonderland","dynamic_video_in_the_browser","emoji_web_components_and_art","go_offline_first_to_save_the_world","how_to_be_a_web_artist","how_to_break_an_api","immutable_data_structures_for_functional_js","js_engines_how_do_they_even","keep_the_internet_weird","lets_go_big","maintaining_an_oss_project","making_the_jump","outbreak_index_sw","parsing_js_better_lazy_than_eager","preact_into_the_void","real_world_connectivity_beyond_the_bubble","sequential_art_comics_and_svgs","the_browser_hackers_guide","the_ethics_of_the_internet_of_things","the_legacy_of_the_js_community","unconscious_bias_we_are_all_guilty","whats_new_in_netscape_navigator_2","yes_your_site_can_be_accessible","you_dont_need_amp_for_that"]}},"childIds":["2017_cssconf_eu","2017_jsconf_eu","2017_jsday_es","search"]}},"childIds":["confs"]}}